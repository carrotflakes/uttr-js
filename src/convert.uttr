
statement
  {
    type: "definitionStatement",
    value
  } = definition_(value)

definition_
  {
    type: "functionDefinition",
    identifier,
    block
  } = {
    type: "FunctionDeclaration",
    id: {type: "Identifier", name: identifier},
    params: [],
    body: {
      type: "BlockStatement",
      body: block_(block)
    },
    generator: false,
    expression: false,
    async: false
  },
  {
    type: "constantDefinition"
    pattern,
    expression
  } = {
    TODO
  }

block_ xs = map([
  {
    patterns,
    guardClausesOrBody,
    whereClause
  } = map(definition_, whereClause) +
    []
  {
    
  }
], xs)

patternDestructure pattern indicators =
  [
    {
      type: "valueExpression"
    } = {}
    {
      type: "variableExpression" "applyExpression" "listExpression" "objectExpression" "consExpression" "atPattern"
    }
  ](pattern)

main(xs) = {
  type: "Program",
  body: map(statement, xs),
  sourceType: "script"
}


map
  (f, x:xs) = f(x):map(f, xs),
  (_, [])   = []


foldl
  (f, l, [])   = l,
  (f, l, r:rs) = foldl(f, f(l, r), rs)

filter
  (f, [])   = [],
  (f, x:xs)
    | f(x)  = x:filter(f, xs)
    | true  = filter(f, xs)

